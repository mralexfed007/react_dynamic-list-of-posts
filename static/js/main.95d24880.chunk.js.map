{"version":3,"sources":["api/posts.js","api/api.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["request","url","option","fetch","then","response","ok","Error","status","statusText","json","data","getCommentsPost","id","comments","filter","comment","postId","PostsList","selectedUser","setSelectedPost","selectedPost","useState","posts","setPosts","useEffect","post","userId","Infinity","className","map","key","title","type","value","onClick","e","target","NewCommentForm","onAddComment","name","setName","email","setEmail","body","setBody","valid","setValid","placeholder","onChange","style","color","fontSize","PostDetails","currentPost","setCurrentPost","setComments","updateCounter","setUpdateCounter","hiddenComments","setHiddenComments","onDelete","method","deleteComment","length","JSON","stringify","addNewComment","App","users","setUsers","setSelectedUser","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95d24880.chunk.js","sourcesContent":["import { BASE_URL } from './api';\n\nconst request = (url, option) => (\n  fetch(`${BASE_URL}${url}`, option).then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  }).then(json => json.data)\n);\n\nexport const getPosts = () => request('/posts');\nexport const getPost = id => request(`/posts/${id}`);\nexport const getUsers = () => request('/users');\nexport const getUserPosts = id => request('/posts')\n  .then(posts => posts\n    .filter(post => (+post.userId === id || id === Infinity)));\n\nexport const getCommentsPost = id => request('/comments')\n  .then(comments => comments\n    .filter(comment => (+comment.postId === id)));\n\nexport const addNewComment = comment => (\n  request('/comments', {\n    method: 'POST',\n    body: JSON.stringify(comment),\n  })\n);\n\nexport const deleteComment = id => (\n  request(`/comments/${id}`, {\n    method: 'DELETE',\n  })\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUser, setSelectedPost, selectedPost }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    getUserPosts(selectedUser).then(setPosts);\n  }\n  , [selectedUser]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              value={post.id}\n              onClick={e => setSelectedPost(+e.target.value)}\n            >\n              {selectedPost === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedPost: PropTypes.number.isRequired,\n  selectedUser: PropTypes.number.isRequired,\n  setSelectedPost: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ onAddComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [valid, setValid] = useState(true);\n  const handleForm = () => {\n    if (name && email && body) {\n      onAddComment({\n        name,\n        email,\n        body,\n      });\n      setName('');\n      setEmail('');\n      setBody('');\n    } else {\n      setValid(false);\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(e) => {\n            setName(e.target.value);\n            setValid(true);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(e) => {\n            setEmail(e.target.value);\n            setValid(true);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(e) => {\n            setBody(e.target.value);\n            setValid(true);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={handleForm}\n      >\n        Add a comment\n      </button>\n      {!valid && (\n        <span style={{\n          color: 'red',\n          fontSize: '14px',\n        }}\n        >\n          Fill  all  fields\n        </span>\n      )}\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAddComment: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPost, getCommentsPost,\n  addNewComment, deleteComment } from '../../api/posts';\n\nexport const PostDetails = ({ post }) => {\n  const [currentPost, setCurrentPost] = useState({});\n  const [comments, setComments] = useState([]);\n  const [updateCounter, setUpdateCounter] = useState(0);\n  const [hiddenComments, setHiddenComments] = useState(false);\n\n  const addComment = (comment) => {\n    addNewComment({\n      postId: post,\n      ...comment,\n    }).then(() => setUpdateCounter(updateCounter + 1));\n  };\n\n  const onDelete = (id) => {\n    deleteComment(id).then(() => setUpdateCounter(updateCounter - 1));\n  };\n\n  useEffect(() => {\n    getPost(post).then(setCurrentPost);\n    getCommentsPost(post).then(setComments);\n  }, [post]);\n  useEffect(() => {\n    getCommentsPost(post).then(setComments);\n  }, [updateCounter]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{currentPost.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => setHiddenComments(!hiddenComments)}\n        >\n          Hide&nbsp;\n          {comments.length}\n          &nbsp;comments\n        </button>\n\n        {!hiddenComments && (\n        <ul className=\"PostDetails__list\">\n          {comments.map(comment => (\n            <li\n              key={comment.id}\n              className=\"PostDetails__list-item\"\n            >\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                value={comment.id}\n                onClick={e => onDelete(e.target.value)}\n              >\n                X\n              </button>\n              <p>{comment.body}</p>\n              <p>{comment.id}</p>\n            </li>\n          ))}\n        </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm onAddComment={addComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  post: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/posts';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(Infinity);\n  const [selectedPost, setSelectedPost] = useState(0);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  const onSelectedPost = id => (id === selectedPost\n    ? setSelectedPost(0)\n    : setSelectedPost(id));\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            onChange={e => setSelectedUser(+e.target.value)}\n          >\n            <option\n              value={Infinity}\n            >\n              All Users\n            </option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            setSelectedPost={onSelectedPost}\n            selectedPost={selectedPost}\n          />\n        </div>\n\n        {selectedPost !== 0 && (\n        <div className=\"App__content\">\n          <PostDetails post={selectedPost} />\n        </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}