{"version":3,"sources":["api/posts.js","api/api.js","components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["request","url","option","fetch","then","response","ok","Error","status","statusText","json","data","getCommentsByPost","id","comments","filter","comment","postId","deleteComment","method","PostsList","selectedUser","setSelectedPost","selectedPost","useState","posts","setPosts","useEffect","post","userId","className","map","key","title","type","value","onClick","e","target","NewCommentForm","onAddComment","name","email","body","setComment","valid","setValid","placeholder","onChange","Object","values","every","field","style","color","fontSize","PostDetails","currentPost","setCurrentPost","setComments","hiddenComments","setHiddenComments","onDelete","a","length","JSON","stringify","addNewComment","App","users","setUsers","setSelectedUser","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50714107.chunk.js","sourcesContent":["import { BASE_URL } from './api';\n\nconst request = (url, option) => (\n  fetch(`${BASE_URL}${url}`, option).then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  }).then(json => json.data)\n);\n\nexport const getPosts = () => request('/posts');\nexport const getPost = id => request(`/posts/${id}`);\nexport const getUsers = () => request('/users');\nexport const getUserPosts = id => request('/posts')\n  .then(posts => posts\n    .filter(post => (+post.userId === id || !id)));\n\nexport const getCommentsByPost = id => request('/comments')\n  .then(comments => comments\n    .filter(comment => (+comment.postId === id)));\n\nexport const addNewComment = comment => (\n  request('/comments', {\n    method: 'POST',\n    body: JSON.stringify(comment),\n  })\n);\n\nexport const deleteComment = id => (\n  request(`/comments/${id}`, {\n    method: 'DELETE',\n  })\n);\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\nexport const PostsList = ({ selectedUser, setSelectedPost, selectedPost }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    getUserPosts(selectedUser).then(setPosts);\n  }\n  , [selectedUser]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                [User #\n                {post.userId}\n                ]:\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              value={post.id}\n              onClick={e => setSelectedPost(+e.target.value)}\n            >\n              {selectedPost === post.id ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  selectedPost: PropTypes.number.isRequired,\n  selectedUser: PropTypes.number.isRequired,\n  setSelectedPost: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ onAddComment }) => {\n  const [comment, setComment] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [valid, setValid] = useState(true);\n  const handleForm = () => {\n    if (Object.values(comment).every(field => field)) {\n      onAddComment(comment);\n      setComment({\n        name: '',\n        email: '',\n        body: '',\n      });\n    } else {\n      setValid(false);\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\">\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={comment.name}\n          onChange={(e) => {\n            setComment({\n              ...comment,\n              name: e.target.value,\n            });\n            setValid(true);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={comment.email}\n          onChange={(e) => {\n            setComment({\n              ...comment,\n              email: e.target.value,\n            });\n            setValid(true);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment.body}\n          onChange={(e) => {\n            setComment({\n              ...comment,\n              body: e.target.value,\n            });\n            setValid(true);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"NewCommentForm__submit-button button\"\n        onClick={handleForm}\n      >\n        Add a comment\n      </button>\n      {!valid && (\n        <span style={{\n          color: 'red',\n          fontSize: '14px',\n        }}\n        >\n          Fill  all  fields\n        </span>\n      )}\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAddComment: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPost, getCommentsByPost,\n  addNewComment, deleteComment } from '../../api/posts';\n\nexport const PostDetails = ({ post }) => {\n  const [currentPost, setCurrentPost] = useState({});\n  const [comments, setComments] = useState([]);\n  const [hiddenComments, setHiddenComments] = useState(false);\n\n  const addComment = (comment) => {\n    addNewComment({\n      postId: post,\n      ...comment,\n    }).then(() => getCommentsByPost(post).then(setComments));\n  };\n\n  const onDelete = async(id) => {\n    await deleteComment(id);\n    getCommentsByPost(post).then(setComments);\n  };\n\n  useEffect(() => {\n    getPost(post).then(setCurrentPost);\n    getCommentsByPost(post).then(setComments);\n  }, [post]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{currentPost.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length !== 0 && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => setHiddenComments(!hiddenComments)}\n          >\n            Hide&nbsp;\n            {comments.length}\n            &nbsp;comments\n          </button>\n        )}\n\n        {!hiddenComments && (\n        <ul className=\"PostDetails__list\">\n          {comments.map(comment => (\n            <li\n              key={comment.id}\n              className=\"PostDetails__list-item\"\n            >\n              <button\n                type=\"button\"\n                className=\"PostDetails__remove-button button\"\n                value={comment.id}\n                onClick={e => onDelete(e.target.value)}\n              >\n                X\n              </button>\n              <p>{comment.body}</p>\n              <p>{comment.id}</p>\n            </li>\n          ))}\n        </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm onAddComment={addComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  post: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/posts';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPost, setSelectedPost] = useState(0);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  const onSelectedPost = id => (id === selectedPost\n    ? setSelectedPost(0)\n    : setSelectedPost(id));\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            onChange={e => setSelectedUser(+e.target.value)}\n          >\n            <option\n              value={0}\n            >\n              All Users\n            </option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUser={selectedUser}\n            setSelectedPost={onSelectedPost}\n            selectedPost={selectedPost}\n          />\n        </div>\n\n        {selectedPost !== 0 && (\n        <div className=\"App__content\">\n          <PostDetails post={selectedPost} />\n        </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}